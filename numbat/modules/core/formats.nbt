use core::strings
use core::strings::extra
use core::functions

let _empty_str = ""
let _period_str = "."
let _zero_str = "0"

fn _remove_trailing_zeroes(s: String) -> String = 
  if !str_contains(s, ".")
  then s
  else if last_char == "0"
    then (str_slice(s, 0, s_length - 1) |> _remove_trailing_zeroes)
  else if last_char == "."
    then str_slice(s, 0, s_length - 1)
  else s
  where s_length = str_length(s)
    and last_char = str_slice(s, s_length - 1, s_length)

@description("Formats value as an ordinary decimal number")
@example("fmt_decimal(1234.56)")
fn fmt_decimal<A>(value: A) -> String = join(tail(parts) |> cons(str_replace(out_str, "_", "")), " ")
    where str: String = "{value}"
      and parts: List<String> = str_split(" ", str)
      and value_str: String = head(parts)
      and value_str_parts = str_split("e", value_str)
      and value_str_value_part = head(value_str_parts)
      and decimal_index = str_find(value_str_value_part, ".")
      and decimal_count: Scalar = str_length(value_str_value_part) - (if decimal_index != -1 then decimal_index + 1 else str_length(value_str_value_part))
      and out_str: String = if !str_contains(value_str, "e") 
        then value_str
        else if !str_contains(value_str, "e-")
          then "{str_replace(value_str_value_part, _period_str, _empty_str)}{str_repeat(_zero_str, parse_int(head(tail(value_str_parts))) - decimal_count)}"
          else "0.{str_repeat(_zero_str, (-parse_int(head(tail(value_str_parts)))) - 1)}{str_replace(value_str_value_part, _period_str, _empty_str)}" |>
          _remove_trailing_zeroes

fn _remove_leading_zeroes(s: String) -> String = 
  if str_find(s, "0") == 0
    then (str_slice(s, 1, str_length(s)) |> _remove_leading_zeroes)
  else if str_find(s, ".") == 0
    then str_append("0", s)
  else s

fn _get_exponent<A: Dim>(value: A) -> Scalar =
  if str_find(value_str, "0") != 0
    then
      if str_contains(value_str, "." ) 
        then str_find(value_str, ".") - 1
        else str_length(value_str) - 1
    else (str_length(trimmed_decimal_value_str)) - (str_length(value_str) - 1)
  where clean_str: String = fmt_decimal(value)
    and parts: List<String> = str_split(" ", clean_str)
    and value_str: String = head(parts)
    and trimmed_decimal_value_str = str_slice(head(parts), 2, str_length(head(parts))) |> _remove_leading_zeroes  

fn _fmt_science<A: Dim>(value: A) -> String = 
  if str_contains(value_str, "e")
    then clean_str
    else join(cons(str_append(output_value_str, exponent_str), tail(parts)), " ")
  where clean_str: String = fmt_decimal(value)
    and parts: List<String> = str_split(" ", clean_str)
    and value_str: String = head(parts)
    and exponent:  Scalar = _get_exponent(value)
    and new_value_str: String = str_replace("{value * 10^(-exponent)}", str_append(" ", join(tail(parts), " ")), "")
    and output_value_str: String = if str_contains(new_value_str, "." ) then new_value_str else "{new_value_str}.0"
    and exponent_str: String = if exponent >= 0 then "e+{exponent}" else "e{exponent}"

@description("Formats value in scientific notation")
@example("fmt_science(1234.56)")
@example("fmt_science(0.000123456)")
fn fmt_science<A: Dim>(value: A) -> String = 
  if value < 0 
  then "-{_fmt_science(abs(value))}" 
  else _fmt_science(value)